#!/usr/local/bin/python3
# your python code starts here

import sys

# Functions & Algorithms Adapted from the Pseudo-Code in CLRS Ch 21 and 23.2
#disjoint set forest
class DSF:
    def __init__(self, v, e):
        self.tree = []
        self.vertices = v
        self.edges = e

    def addEdge(self, label, e, w):
        self.tree.append( [label, e, w] )

    def union(self, x, y, parent, rank):
        self.link(self.findSet(x,parent), self.findSet(y,parent), parent, rank )

    def link(self, x, y, parent, rank):
        if rank[x] > rank[y]:
            parent[y] = x
        else:
            parent[x] = y
            if rank[x] == rank[y]:
                rank[y]+=1

    def findSet(self, x, parent):
        if x != parent[x]:
            parent[x] = self.findSet(parent[x], parent)
        return parent[x]


    def Kruskals(self):
        A=[]
        parent=[]
        rank=[]
        for vertices in range(self.vertices+1):
            parent.append(vertices)
            rank.append(0)
        self.tree.sort(key=lambda i: i[2])
        for edges in range(0, self.edges):
            u,v = self.tree[edges][1]
            if (self.findSet(u, parent)) != (self.findSet(v, parent)):
                label=self.tree[edges][0]
                w=self.tree[edges][2]
                A.append( [label,(u,v),w] )
                self.union(u, v, parent, rank)
#            print(A)
        return A

#edges = ( (1,2), (1,4), (2,3), (2,5), (3,5), (3,7), (4,5), (4,6), (5,6), (5,7), (6,7) )
#my_graph = [ (1, edges[0], 6), (2, edges[1], 3), (3, edges[2], 5), (4, edges[3], 8), (5, edges[4], 1),\
# (6, edges[5],4), (7, edges[6],7), (8, edges[7],9), (9, edges[8],6), (10, edges[9],5), (11, edges[10],2) ]

file_in=""
file_out=""
if(len(sys.argv)<3):
    print("please enter an input and output file")
else:
    file_in+=sys.argv[1]
    file_out+=sys.argv[2]


file = open(file_in,"r")
lines = file.readlines()

vertex_ct = int(lines[0].strip(" \n"))
edges = int(lines[1].strip(" \n"))

T = DSF(vertex_ct, edges)
for i in range(2, len(lines)):
    if(lines[i]!= "\n"):
        u,v,w = lines[i].strip().split()
        T.addEdge(i-1, (int(u),int(v)), int(w) )
        #print("u:", int(u), "v:", v,"w :",w)
file.close()

file_write = open(file_out, "w")

mwst = T.Kruskals()

total_weight=0
for i in range(0,len(mwst)):
    file_write.write('{:>4}'.format(mwst[i][0]))
    file_write.write(f": {mwst[i][1]} {mwst[i][2]:.1f}\n")
#    print('{:>4}'.format(mwst[i][0]), end=": ")
#    print(f"{mwst[i][1]} {mwst[i][2]:.1f}")
    total_weight+=mwst[i][2]

file_write.write(f"Total Weight = {total_weight:.2f}\n")
#print(f"Total Weight = {total_weight:.2f}")


    